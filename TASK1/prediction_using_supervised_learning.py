# -*- coding: utf-8 -*-
"""Prediction using supervised learning.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1UvxR0vzygCSgOk_c75QBBBjYBFofkyjN

## **THE SPARKS FOUNDATION INTERNSHIP- DATA SCIENCE AND BUSINESS ANALYTICS**

**NAME: ANUPAMA A P**

**TASK: 1**

**Predict the percentage of marks that a student is expected to score based upon the number of hours they studied. This is a simple linear regression task as it involves just two variables.**

**1.IMPORTING LIBRARIES**
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np  
import matplotlib.pyplot as plt  
# %matplotlib inline

#importing data
url = "http://bit.ly/w-data"
s_data = pd.read_csv(url)
print("Data imported successfully")

s_data.head(10)

s_data.plot(x='Hours', y='Scores', style='o')  
plt.title('Hours vs Percentage')  
plt.xlabel('Hours Studied')  
plt.ylabel('Percentage Score')  
plt.show()

s_data.shape

s_data.describe()

"""**2.ATTRIBUTES**"""

#Now we have an idea about statistical details of our data. The next step is to divide the data into "attributes" and "labels". 
x = s_data.iloc[:, :-1].values  
y = s_data.iloc[:, 1].values

"""**3.TRAINING DATA**"""

from sklearn.model_selection import train_test_split  
x_train, x_test, y_train, y_test = train_test_split(x, y,test_size=0.2, random_state=0)

from sklearn.linear_model import LinearRegression  
regressor = LinearRegression()  
regressor.fit(x_train, y_train) 

print("Done with the training.")

line = regressor.coef_*x+regressor.intercept_
plt.scatter(x, y)
plt.title('Hours vs Percentage')  
plt.xlabel('Hours Studied')  
plt.ylabel('Percentage Score')  
plt.scatter(x,y,color='Black')
plt.plot(x,line, color='Red')
plt.show()

print(regressor.intercept_)
print(regressor.coef_)
#if a student studies one hour greater than they had previously studied for an exam, 
#they are expected to achieve an increase of 9.91% compared to the score achieved by the student previously.

print(x_test)
y_pred = regressor.predict(x_test)

df = pd.DataFrame({'Actual': y_test, 'Predicted': y_pred})  
df

hours = 9.25
own_pred= regressor.predict([[hours]])
print("No of Hours ={}".format(hours))
print("Predicted Score ={}".format(own_pred[0]))